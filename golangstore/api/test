package main

import (
	"fmt"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"

	_ "github.com/jinzhu/gorm/dialects/postgres"
)

type User struct {
	ID        uint      `gorm:"primary_key" json:"id"`
	Name      string    `gorm:"not null" json:"name"`
	Email     string    `gorm:"not null;unique_index" json:"email"`
	Password  string    `gorm:"not null" json:"-"`
	CreatedAt time.Time `gorm:"default:CURRENT_TIMESTAMP" json:"created_at"`
	UpdatedAt time.Time `gorm:"default:CURRENT_TIMESTAMP" json:"updated_at"`
}

func main() {
	db, err := gorm.Open("postgres", "postgres://root:cusbo@localhost:5432/golangstote?sslmode=disable")
	if err != nil {
		panic(err)
	}
	defer db.Close()

	if err := db.DB().Ping(); err != nil {
		panic(err)
	}
	fmt.Println("Database connected successfully.")

	db.AutoMigrate(&User{})

	r := gin.Default()
	r.Use(func(c *gin.Context) {
		c.Set("db", db)
		c.Next()
	})

	r.POST("/signup", func(c *gin.Context) {
		db := c.MustGet("db").(*gorm.DB)

		var user User
		if err := c.BindJSON(&user); err != nil {
			c.JSON(400, gin.H{"error": err.Error()})
			return
		}

		if err := db.Create(&user).Error; err != nil {
			c.JSON(400, gin.H{"error": err.Error()})
			return
		}

		c.JSON(200, gin.H{"message": "user created"})
	})

	port := ":8080"
	fmt.Printf("Server listening on port %s\n", port)
	fmt.Println("Database connection status:", db.DB().Stats().OpenConnections)
	if err := r.Run(port); err != nil {
		panic(err)
	}
}
